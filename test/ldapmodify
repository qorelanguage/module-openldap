#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings

# uses the openldap module
%requires openldap

# ensure minimum version of qore
%requires qore >= 0.8.7

main();

const Defaults = (
    "uri": "ldap://localhost:389",
    );

const opts = (
    # modify
    "add": "a,add",
    "del": "x,delete",

    # common
    "uri": "H,uri=s",
    "binddn": "D,binddn=s",
    "password": "w,passwd=s",
    "info": "i,info",
    "verbose": "v,verbose",
    "timeout": "l,timeout=i",
    "protocol": "P,protocol=i",
    "no-referrals": "r,no-referrals",
    "starttls": "Z,starttls",
    "help": "h,help",
    );

const LdapOptions = ("binddn", "password", "base", "timeout", "protocol", "no-referrals", "starttls");

sub main() {
    # process command-line options
    GetOpt g(opts);
    hash opts = g.parse3(\ARGV);
    if (opts.help)
	usage();

    if (opts.info) {
	printf("%N\n", LdapClient::getInfo());
	exit(0);
    }

    *string dn = shift ARGV;
    if (!dn) {
        stderr.printf("%s: missing dn to modify\n", get_script_name());
        exit(1);
    }

    if (!opts.uri)
	opts.uri = Defaults.uri;

    string mod;
    if (opts.add) {
        if (opts.del) {
            stderr.printf("%s: can't use both -a (add) and -x (delete) options together\n", get_script_name());
            exit(1);
        }
        mod = LDAP_MOD_ADD;
    }
    else if (opts.del)
        mod = LDAP_MOD_DELETE;
    else
        mod = LDAP_MOD_REPLACE;

    # get modification argument list
    list mods = ();
    while (ARGV) {
        *string attr = shift ARGV;
        if (!attr) {
            stderr.printf("%s: missing attribute to modify in argument %d (starting with 0)\n", get_script_name(), mods.size());
            exit(1);
        }
        *string value = shift ARGV;
        if (!value) {
            stderr.printf("%s: missing attribute value in argument %d (starting with 0)\n", get_script_name(), mods.size());
            exit(1);
        }
        if (opts.del && value == "-")
            delete value;

        mods += (
            "mod": mod,
            "attr": attr,
            "value": value,
            );
    }

    hash lopt = opts{LdapOptions};

    if (opts.verbose)
        printf("uri: %y, lopt: %y, dn: %y, mods: %y\n", opts.uri, lopt, dn, mods);

    LdapClient ldap(opts.uri, lopt);
    ldap.modify(dn, mods);
}

sub usage() {
    printf("usage: %s [options] <dn> <attr> <value> [<attr> <value> ...]
Modify Options:
  -a,--add           add values (default is to replace)
  -x,--delete        delete values (default is to replace); to delete the
                     entire attribute (all values); use '-' as the value

Common LDAP Options:
  -D,--binddn=ARG    bind DN
  -H,--uri=ARG       LDAP Uniform Resource Identifier(s)
  -l,--timeout=ARG   set timeout in milliseconds (default: %y)
  -P,--protocol=ARG  set protocol version (default: 3)
  -r,--no-referrals  do not chase referrals
  -v,--verbose       verbose mode; shows more information
  -w,--passwd=ARG    bind password (for simple authentication)
  -Z,--starttls      ensure a secure connection

Other Options:
  -i,--info          show ldap library info and exit
  -h,--help          this help text
", get_script_name(), OpenLdap::DefaultTimeout);
    exit(0);
}
