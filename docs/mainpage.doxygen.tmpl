/** @mainpage %Qore openldap Module

    @tableofcontents

    @section intro Introduction

    The openldap exposes functionality from the <a href="http://www.openldap.org">openldap</a> library as a Qore API, allowing qore programs to communicate with LDAP servers.

    This module is released under the <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">LGPL 2.1</a> and is tagged as such in the module's header (meaning it can be loaded unconditionally regardless of how the Qore library was initialized).

    Like all Qore components, the openldap module is thread-safe.  The @ref OpenLdap::LdapClient class wraps requests in a mutual-exclusion lock to ensure atomicity and thread-safety.  

    Asynchronous APIs are used internally to enforce time limits for each LDAP operation.  The default timeout for all LDAP operations is set in the @ref OpenLdap::LdapClient::constructor() "LdapClient::constructor()" method with the \c "timeout" option, however each method requiring communication with the LDAP server also takes an option timeout argument that allows the default timeout to be overridden for specific calls.  If no \c "timeout" option is specifically set in the @ref OpenLdap::LdapClient::constructor() "LdapClient::constructor()", the default timeout for the object is automatically set to 60 seconds.

    The underlying %LDAP functionality is provided by the <a href="http://www.openldap.org">openldap library</a>.    

    @section examples Examples

    The bulk of the LDAP functionality provided by this module is encapsulated in the @ref OpenLdap::LdapClient class.

    @par Performing an LDAP Search
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
my hash $search = (
    "base": "ou=people,dc=example,dc=com",
    "filter": "(uid=username)",
    "attributes": ("uidNumber", "gidNumber"),
    "scope": LDAP_SCOPE_BASE,
);
my hash $result = $ldap.search($search);
    @endcode
    @see @ref OpenLdap::LdapClient::search() "LdapClient::search()"

    @par Adding an LDAP Entry
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
$ldap.add("uid=test,ou=people,dc=example,dc=com", ("objectclass": "inetorgperson", "sn": "Test", "cn": "User Test"));
    @endcode
    @see @ref OpenLdap::LdapClient::add() "LdapClient::add()"

    @par Modifying Attributes of an Existing LDAP Entry
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
$ldap.modify("uid=test,ou=people,dc=example,dc=com", ("mod": LDAP_MOD_REPLACE, "attr": "gidnumber", "value": 1000));
    @endcode
    @see @ref OpenLdap::LdapClient::modify() "LdapClient::modify()"

    @par Deleting an Existing LDAP Entry
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
$ldap.del("uid=test,ou=people,dc=example,dc=com");
    @endcode
    @see @ref OpenLdap::LdapClient::del() "LdapClient::del()"

    @section release_notes Release Notes
    @subsection rel10 openldap Module 1.0
    Initial release of the module.
*/
