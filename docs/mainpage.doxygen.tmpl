/** @mainpage %Qore openldap Module

    @tableofcontents

    @section openldapintro Introduction

    The openldap module exposes functionality from the <a href="http://www.openldap.org">openldap</a> library as a Qore API, allowing qore programs to communicate with LDAP servers.

    This module is released under the <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">LGPL 2.1</a> and is tagged as such in the module's header (meaning it can be loaded unconditionally regardless of how the Qore library was initialized).

    Like all Qore components, the openldap module is thread-safe.  The @ref OpenLdap::LdapClient class represents a single network connection to the LDAP server and therefore wraps requests in a mutual-exclusion lock to ensure atomicity and thread-safety.

    Asynchronous APIs are used internally to enforce time limits for each LDAP operation.  The default timeout for all LDAP operations is set in the @ref OpenLdap::LdapClient::constructor() "LdapClient::constructor()" method with the \c "timeout" option, however each method requiring communication with the LDAP server also takes an optional timeout argument that allows the default timeout to be overridden for specific calls.  If no \c "timeout" option is specifically set in the @ref OpenLdap::LdapClient::constructor() "LdapClient::constructor()", the default timeout for new objects is automatically set to 60 seconds.

    <b>Overview of Operations Supported by the LdapClient Class</b>
    |!Operation|!Method|!Description
    |search|@ref OpenLdap::LdapClient::search() "LdapClient::search()"|Search for entries and attributes
    |add|@ref OpenLdap::LdapClient::add() "LdapClient::add()"|Add entries to the Directory Information Tree
    |modify|@ref OpenLdap::LdapClient::modify() "LdapClient::modify()"|Modify existing entries
    |delete|@ref OpenLdap::LdapClient::del() "LdapClient::del()"|Delete existing Entries
    |compare|@ref OpenLdap::LdapClient::compare() "LdapClient::compare()"|Compare attribute values
    |rename|@ref OpenLdap::LdapClient::rename() "LdapClient::rename()"|Rename or move entries to another location in the Directory Information Tree
    |change password|@ref OpenLdap::LdapClient::passwd() "LdapClient::passwd()"|Changes the LDAP password for the given user

    The underlying %LDAP functionality is provided by the <a href="http://www.openldap.org">openldap library</a>.

    @section openldap_examples Examples

    The bulk of the LDAP functionality provided by this module is encapsulated in the @ref OpenLdap::LdapClient class.  There are also four example programs included with the openldap module: qldapsearch, qldapmodify, qldapdelete, qldapadd, and qldappasswd.  These are somewhat similar in usage to the standard LDAP commands, however are designed to provide user-friendly examples of command-line Qore-based LDAP integration, and, for example, do not support or work with LDIF formatted data, etc (for example, qldapsearch outputs the results of a search as a multi-line formatted Qore hash).

    @par Performing an LDAP Search
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
my hash $search = (
    "base": "ou=people,dc=example,dc=com",
    "filter": "(uid=username)",
    "attributes": ("uidNumber", "gidNumber"),
    "scope": LDAP_SCOPE_BASE,
);
my hash $result = $ldap.search($search);
    @endcode
    @see @ref OpenLdap::LdapClient::search() "LdapClient::search()"

    @par Adding an LDAP Entry
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
$ldap.add("uid=test,ou=people,dc=example,dc=com", ("objectclass": "inetorgperson", "sn": "Test", "cn": "User Test"));
    @endcode
    @see @ref OpenLdap::LdapClient::add() "LdapClient::add()"

    @par Modifying Attributes of an Existing LDAP Entry
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
$ldap.modify("uid=test,ou=people,dc=example,dc=com", ("mod": LDAP_MOD_REPLACE, "attr": "gidnumber", "value": 1000));
    @endcode
    @see @ref OpenLdap::LdapClient::modify() "LdapClient::modify()"

    @par Deleting an Existing LDAP Entry
    @code
%requires openldap
my string $uri = "ldap://localhost";
my hash $conn_opts = (
    "binddn": "cn=admin,dc=example,dc=com",
    "password": "password",
    "timeout": 20s,
    "starttls": True,
);
my LdapClient $ldap($uri, $conn_opts);
$ldap.del("uid=test,ou=people,dc=example,dc=com");
    @endcode
    @see @ref OpenLdap::LdapClient::del() "LdapClient::del()"

    @section openldap_limitations Limitations

    This module currently has the following limitations:
    - supports only simple SASL binds
    - extended operations are not supported
    - server and client controls are not supported
    - LDAP transactions are not supported

    @section openldap_release_notes Release Notes

    @subsection openldap_rel12 openldap Module 1.2

    @subsection openldap_rel11 openldap Module 1.1.1
    - fixed a bug where incorrect class destructor is called in openldap module (<a href="https://github.com/qorelanguage/qore/issues/1174">issue 1174</a>)

    @subsection openldap_rel11 openldap Module 1.1
    - disable openssl cleanup in the Qore library since the openldap module makes openssl cleanup calls and calling those routines twice can result in segfaults
    - updated example/test scripts to use %%strict-args

    @subsection openldap_rel10 openldap Module 1.0
    - Initial release of the module.
*/
